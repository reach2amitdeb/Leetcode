1007. Minimum Domino Rotations For Equal Row
--------------------------------------------
In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that tops[i] and bottoms[i] swap values.

Return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.

If it cannot be done, return -1.

Solution:

class Solution {
    public int minDominoRotations(int[] tops, int[] bottoms) {
        int n = tops.length;
        int rotations = check(tops[0], bottoms, tops, n);
        // If one could make all elements in A or B equal to A[0]
        if (rotations != -1 || tops[0] == bottoms[0]) return rotations;
        // If one could make all elements in A or B equal to B[0]
        else return check(bottoms[0], bottoms, tops, n);
    }
     public int check(int x, int[] tops, int[] bottoms, int n) {
    // how many rotations should be done
    // to have all elements in A equal to x
    // and to have all elements in B equal to x
    int rotations_tops = 0, rotations_bottoms = 0;
    for (int i = 0; i < n; i++) {
      // rotations coudn't be done
      if (tops[i] != x && bottoms[i] != x) return -1;
      // A[i] != x and B[i] == x
      else if (tops[i] != x) rotations_tops++;
      // A[i] == x and B[i] != x    
      else if (bottoms[i] != x) rotations_bottoms++;
    }
    // min number of rotations to have all
    // elements equal to x in A or B
    return Math.min(rotations_tops, rotations_bottoms);
  }
}