2. Add Two Numbers
------------------
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Solution:

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode currentNode = dummyHead;
        int carry = 0;
        
        ListNode nodeOne = l1;
		ListNode nodeTwo = l2;
		
		while(nodeOne != null || nodeTwo != null || carry != 0){
			int valueOne = (nodeOne != null) ? nodeOne.val : 0;
			int valueTwo = (nodeTwo != null) ? nodeTwo.val : 0;
			int sumValue = valueOne + valueTwo + carry;
			
			int newValue = sumValue % 10;
			ListNode temp = new ListNode(newValue);
			currentNode.next = temp;
			currentNode = temp;
			
			carry = sumValue / 10;
			nodeOne = (nodeOne != null) ? nodeOne.next : null;
			nodeTwo = (nodeTwo != null) ? nodeTwo.next : null;
		}
        return dummyHead.next;
    }
}