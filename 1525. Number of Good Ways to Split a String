1525. Number of Good Ways to Split a String
-------------------------------------------
You are given a string s, a split is called good if you can split s into 2 non-empty strings p and q where its concatenation is equal to s and the number of distinct letters in p and q are the same.

Return the number of good splits you can make in s.

Solution 1:

class Solution {
    public int numSplits(String s) {
        int n = s.length();
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        
        Set<Character> preSet = new HashSet();
        Set<Character> sufSet = new HashSet();
        
        for(int i=0; i<n; i++){
            preSet.add(s.charAt(i));
            sufSet.add(s.charAt(n-1 -i));
            prefix[i] = preSet.size();
            suffix[n-1 - i] = sufSet.size();
        }
        
        int goodWays = 0;
        for(int i=1; i<n; i++){
            if(prefix[i-1] == suffix[i]){
                goodWays++;
            }
        }
        return goodWays;
    }
}

Solution 2:

class Solution {
    public int numSplits(String s) {
        HashMap<Character, Integer> left = new HashMap<>();
        HashMap<Character, Integer> right = new HashMap<>();
        int ans = 0;
        int count = 0;
        for(char c : s.toCharArray()) right.put(c, right.getOrDefault(c, 0) + 1);
        for(char c : s.toCharArray()) {
        // Move character from right to left
            right.put(c, right.getOrDefault(c, 0) - 1);
            left.put(c, left.getOrDefault(c, 0) + 1);
            if(right.get(c) == 0) {
            count++;
            }
            // Compare unique characters
            if((right.size() - count) == left.size()) ans++;
        }
        return ans;
    }
}